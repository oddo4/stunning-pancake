/*
 * SpoonacularAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 01/19/2017
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using SpoonacularAPI.PCL;
using SpoonacularAPI.PCL.Utilities;
using SpoonacularAPI.PCL.Http.Request;
using SpoonacularAPI.PCL.Http.Response;
using SpoonacularAPI.PCL.Http.Client;
using SpoonacularAPI.PCL.Exceptions;
using SpoonacularAPI.PCL.Models;

namespace SpoonacularAPI.PCL.Controllers
{
    public partial class APIController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static APIController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static APIController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new APIController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get information about a packaged food product.
        /// </summary>
        /// <param name="id">Required parameter: The id of the packaged food product.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetProductInformation(int id)
        {
            Task<dynamic> t = GetProductInformationAsync(id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get information about a packaged food product.
        /// </summary>
        /// <param name="id">Required parameter: The id of the packaged food product.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetProductInformationAsync(int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/food/products/{id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Find recipes which are similar to the given one.
        /// </summary>
        /// <param name="id">Required parameter: The id of the source recipe to which similar recipes should be found.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic FindSimilarRecipes(int id)
        {
            Task<dynamic> t = FindSimilarRecipesAsync(id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Find recipes which are similar to the given one.
        /// </summary>
        /// <param name="id">Required parameter: The id of the source recipe to which similar recipes should be found.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> FindSimilarRecipesAsync(int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/{id}/similar");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Autocomplete a search for an ingredient.
        /// </summary>
        /// <param name="query">Required parameter: The query - a partial or full ingredient name.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetAutocompleteIngredientSearch(string query)
        {
            Task<dynamic> t = GetAutocompleteIngredientSearchAsync(query);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Autocomplete a search for an ingredient.
        /// </summary>
        /// <param name="query">Required parameter: The query - a partial or full ingredient name.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAutocompleteIngredientSearchAsync(string query)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/food/ingredients/autocomplete");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "query", query }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Visualize the price breakdown of a recipe.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The number of servings.</param>
        /// <param name="defaultCss">Optional parameter: Whether the widget should be styled with the default css.</param>
        /// <param name="mode">Optional parameter: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateVisualizePriceBreakdown(
                string ingredientList,
                int servings,
                string defaultCss = "checked",
                int? mode = 1,
                Dictionary<string, object> fieldParameters = null)
        {
            Task<dynamic> t = CreateVisualizePriceBreakdownAsync(ingredientList, servings, defaultCss, mode, fieldParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Visualize the price breakdown of a recipe.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The number of servings.</param>
        /// <param name="defaultCss">Optional parameter: Whether the widget should be styled with the default css.</param>
        /// <param name="mode">Optional parameter: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateVisualizePriceBreakdownAsync(
                string ingredientList,
                int servings,
                string defaultCss = "checked",
                int? mode = 1,
                Dictionary<string, object> fieldParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/visualizePriceEstimator");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "ingredientList", ingredientList },
                { "servings", servings },
                { "defaultCss", (null != defaultCss) ? defaultCss : "checked" },
                { "mode", (null != mode) ? mode : 1 }
            };
            //optional form parameters
            _fields.Add(APIHelper.PrepareFormFieldsFromObject("",fieldParameters));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Visualize a recipe's nutritional information.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The number of servings.</param>
        /// <param name="defaultCss">Optional parameter: Whether the ingredient list should be styled with the default css.</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateVisualizeNutrition(
                string ingredientList,
                int servings,
                string defaultCss = "checked",
                Dictionary<string, object> fieldParameters = null)
        {
            Task<dynamic> t = CreateVisualizeNutritionAsync(ingredientList, servings, defaultCss, fieldParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Visualize a recipe's nutritional information.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The number of servings.</param>
        /// <param name="defaultCss">Optional parameter: Whether the ingredient list should be styled with the default css.</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateVisualizeNutritionAsync(
                string ingredientList,
                int servings,
                string defaultCss = "checked",
                Dictionary<string, object> fieldParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/visualizeNutrition");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "ingredientList", ingredientList },
                { "servings", servings },
                { "defaultCss", (null != defaultCss) ? defaultCss : "checked" }
            };
            //optional form parameters
            _fields.Add(APIHelper.PrepareFormFieldsFromObject("",fieldParameters));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Visualize ingredients of a recipe.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The initial number of servings.</param>
        /// <param name="defaultCss">Optional parameter: Whether the ingredient list should be styled with the default css.</param>
        /// <param name="measure">Optional parameter: The initial measure, either "metric" or "us".</param>
        /// <param name="view">Optional parameter: The initial view, either "grid" or "list".</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateVisualizeIngredients(
                string ingredientList,
                int servings,
                string defaultCss = "checked",
                string measure = "metric",
                string view = "grid",
                Dictionary<string, object> fieldParameters = null)
        {
            Task<dynamic> t = CreateVisualizeIngredientsAsync(ingredientList, servings, defaultCss, measure, view, fieldParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Visualize ingredients of a recipe.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The initial number of servings.</param>
        /// <param name="defaultCss">Optional parameter: Whether the ingredient list should be styled with the default css.</param>
        /// <param name="measure">Optional parameter: The initial measure, either "metric" or "us".</param>
        /// <param name="view">Optional parameter: The initial view, either "grid" or "list".</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateVisualizeIngredientsAsync(
                string ingredientList,
                int servings,
                string defaultCss = "checked",
                string measure = "metric",
                string view = "grid",
                Dictionary<string, object> fieldParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/visualizeIngredients");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "ingredientList", ingredientList },
                { "servings", servings },
                { "defaultCss", (null != defaultCss) ? defaultCss : "checked" },
                { "measure", (null != measure) ? measure : "metric" },
                { "view", (null != view) ? view : "grid" }
            };
            //optional form parameters
            _fields.Add(APIHelper.PrepareFormFieldsFromObject("",fieldParameters));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Summarize the recipe in a short text.
        /// </summary>
        /// <param name="id">Required parameter: The id of the recipe that should be summarized.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetSummarizeRecipe(int id)
        {
            Task<dynamic> t = GetSummarizeRecipeAsync(id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Summarize the recipe in a short text.
        /// </summary>
        /// <param name="id">Required parameter: The id of the recipe that should be summarized.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetSummarizeRecipeAsync(int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/{id}/summary");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Search packaged food products like frozen pizza and snickers bars.
        /// </summary>
        /// <param name="query">Required parameter: The search query.</param>
        /// <param name="number">Optional parameter: The number of results to retrieve, defaults to 10.</param>
        /// <param name="offset">Optional parameter: The number of results to skip, defaults to 0.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic SearchGroceryProducts(
                string query,
                int? number = 10,
                int? offset = 0,
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = SearchGroceryProductsAsync(query, number, offset, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Search packaged food products like frozen pizza and snickers bars.
        /// </summary>
        /// <param name="query">Required parameter: The search query.</param>
        /// <param name="number">Optional parameter: The number of results to retrieve, defaults to 10.</param>
        /// <param name="offset">Optional parameter: The number of results to skip, defaults to 0.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> SearchGroceryProductsAsync(
                string query,
                int? number = 10,
                int? offset = 0,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/food/products/search");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "query", query },
                { "number", (null != number) ? number : 10 },
                { "offset", (null != offset) ? offset : 0 }
            });

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Answer a nutrition related natural language question.
        /// </summary>
        /// <param name="q">Required parameter: The nutrition-related question.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetQuickAnswer(string q)
        {
            Task<dynamic> t = GetQuickAnswerAsync(q);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Answer a nutrition related natural language question.
        /// </summary>
        /// <param name="q">Required parameter: The nutrition-related question.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetQuickAnswerAsync(string q)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/quickAnswer");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "q", q }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get information about a recipe.
        /// </summary>
        /// <param name="id">Required parameter: The id of the recipe.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetRecipeInformation(int id)
        {
            Task<dynamic> t = GetRecipeInformationAsync(id);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get information about a recipe.
        /// </summary>
        /// <param name="id">Required parameter: The id of the recipe.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetRecipeInformationAsync(int id)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/{id}/information");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Extract an ingredient from plain text.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The number of servings that you can make from the ingredients.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateParseIngredients(string ingredientList, int servings)
        {
            Task<dynamic> t = CreateParseIngredientsAsync(ingredientList, servings);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Extract an ingredient from plain text.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="servings">Required parameter: The number of servings that you can make from the ingredients.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateParseIngredientsAsync(string ingredientList, int servings)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/parseIngredients");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "ingredientList", ingredientList },
                { "servings", servings }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Map ingredients to food products.
        /// </summary>
        /// <param name="ingredientList">Required parameter: A new line-separated list of ingredients.</param>
        /// <param name="servings">Required parameter: The number of servings this recipe makes.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateMapIngredients(string ingredientList, int servings)
        {
            Task<dynamic> t = CreateMapIngredientsAsync(ingredientList, servings);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Map ingredients to food products.
        /// </summary>
        /// <param name="ingredientList">Required parameter: A new line-separated list of ingredients.</param>
        /// <param name="servings">Required parameter: The number of servings this recipe makes.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateMapIngredientsAsync(string ingredientList, int servings)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/food/ingredients/map");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "ingredientList", ingredientList },
                { "servings", servings }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Extract recipe data from a recipe blog or Web page.
        /// </summary>
        /// <param name="url">Required parameter: The URL of the recipe page.</param>
        /// <param name="forceExtraction">Optional parameter: If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetExtractRecipeFromWebsite(string url, bool? forceExtraction = false, Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = GetExtractRecipeFromWebsiteAsync(url, forceExtraction, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Extract recipe data from a recipe blog or Web page.
        /// </summary>
        /// <param name="url">Required parameter: The URL of the recipe page.</param>
        /// <param name="forceExtraction">Optional parameter: If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetExtractRecipeFromWebsiteAsync(string url, bool? forceExtraction = false, Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/extract");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "url", url },
                { "forceExtraction", (null != forceExtraction) ? forceExtraction : false }
            });

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Compute a meal plan for a day.
        /// </summary>
        /// <param name="targetCalories">Required parameter: The target number of calories per day.</param>
        /// <param name="timeFrame">Required parameter: For one day or a complete week, allowed values are "day" and "week".</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetComputeDailyMealPlan(int targetCalories, string timeFrame)
        {
            Task<dynamic> t = GetComputeDailyMealPlanAsync(targetCalories, timeFrame);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Compute a meal plan for a day.
        /// </summary>
        /// <param name="targetCalories">Required parameter: The target number of calories per day.</param>
        /// <param name="timeFrame">Required parameter: For one day or a complete week, allowed values are "day" and "week".</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetComputeDailyMealPlanAsync(int targetCalories, string timeFrame)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/mealplans/generate");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "targetCalories", targetCalories },
                { "timeFrame", timeFrame }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Given a set of product jsons, get back classified products.
        /// </summary>
        /// <param name="productJsonArray">Required parameter: A JSON Array of products.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateClassifyGroceryProductsBatch(List<Productjsonarray> productJsonArray)
        {
            Task<dynamic> t = CreateClassifyGroceryProductsBatchAsync(productJsonArray);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Given a set of product jsons, get back classified products.
        /// </summary>
        /// <param name="productJsonArray">Required parameter: A JSON Array of products.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateClassifyGroceryProductsBatchAsync(List<Productjsonarray> productJsonArray)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/food/products/classifyBatch");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append body params
            var _body = APIHelper.JsonSerialize(productJsonArray);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Classify the recipe's cuisine.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="title">Required parameter: The title of the recipe.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateClassifyCuisine(string ingredientList, string title)
        {
            Task<dynamic> t = CreateClassifyCuisineAsync(ingredientList, title);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Classify the recipe's cuisine.
        /// </summary>
        /// <param name="ingredientList">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="title">Required parameter: The title of the recipe.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateClassifyCuisineAsync(string ingredientList, string title)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/cuisine");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "ingredientList", ingredientList },
                { "title", title }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
        /// </summary>
        /// <param name="productJson">Required parameter: The json representation of a product.</param>
        /// <return>Returns the Classifiedproduct response from the API call</return>
        public Classifiedproduct CreateClassifyAGroceryProduct(Productjson productJson)
        {
            Task<Classifiedproduct> t = CreateClassifyAGroceryProductAsync(productJson);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
        /// </summary>
        /// <param name="productJson">Required parameter: The json representation of a product.</param>
        /// <return>Returns the Classifiedproduct response from the API call</return>
        public async Task<Classifiedproduct> CreateClassifyAGroceryProductAsync(Productjson productJson)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/food/products/classify");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append body params
            var _body = APIHelper.JsonSerialize(productJson);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Classifiedproduct>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Search recipes in natural language.
        /// </summary>
        /// <param name="query">Required parameter: The (natural language) recipe search query.</param>
        /// <param name="cuisine">Optional parameter: The cuisine(s) of the recipes. One or more (comma separated) of the following: african, chinese, japanese, korean, vietnamese, thai, indian, british, irish, french, italian, mexican, spanish, middle eastern, jewish, american, cajun, southern, greek, german, nordic, eastern european, caribbean, or latin american.</param>
        /// <param name="diet">Optional parameter: The diet to which the recipes must be compliant. Possible values are: pescetarian, lacto vegetarian, ovo vegetarian, vegan, and vegetarian.</param>
        /// <param name="excludeIngredients">Optional parameter: An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.</param>
        /// <param name="intolerances">Optional parameter: A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. Possible values are: dairy, egg, gluten, peanut, sesame, seafood, shellfish, soy, sulfite, tree nut, and wheat.</param>
        /// <param name="limitLicense">Optional parameter: Whether the recipes should have an open license that allows for displaying with proper attribution.</param>
        /// <param name="number">Optional parameter: The number of results to return (between 0 and 100).</param>
        /// <param name="offset">Optional parameter: The number of results to skip (between 0 and 900).</param>
        /// <param name="type">Optional parameter: The type of the recipes. One of the following: main course, side dish, dessert, appetizer, salad, bread, breakfast, soup, beverage, sauce, or drink.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic SearchRecipes(
                string query,
                string cuisine = "italian",
                string diet = "vegetarian",
                string excludeIngredients = "coconut",
                string intolerances = "egg, gluten",
                bool? limitLicense = false,
                int? number = 10,
                int? offset = 0,
                string type = "main course",
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = SearchRecipesAsync(query, cuisine, diet, excludeIngredients, intolerances, limitLicense, number, offset, type, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Search recipes in natural language.
        /// </summary>
        /// <param name="query">Required parameter: The (natural language) recipe search query.</param>
        /// <param name="cuisine">Optional parameter: The cuisine(s) of the recipes. One or more (comma separated) of the following: african, chinese, japanese, korean, vietnamese, thai, indian, british, irish, french, italian, mexican, spanish, middle eastern, jewish, american, cajun, southern, greek, german, nordic, eastern european, caribbean, or latin american.</param>
        /// <param name="diet">Optional parameter: The diet to which the recipes must be compliant. Possible values are: pescetarian, lacto vegetarian, ovo vegetarian, vegan, and vegetarian.</param>
        /// <param name="excludeIngredients">Optional parameter: An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.</param>
        /// <param name="intolerances">Optional parameter: A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. Possible values are: dairy, egg, gluten, peanut, sesame, seafood, shellfish, soy, sulfite, tree nut, and wheat.</param>
        /// <param name="limitLicense">Optional parameter: Whether the recipes should have an open license that allows for displaying with proper attribution.</param>
        /// <param name="number">Optional parameter: The number of results to return (between 0 and 100).</param>
        /// <param name="offset">Optional parameter: The number of results to skip (between 0 and 900).</param>
        /// <param name="type">Optional parameter: The type of the recipes. One of the following: main course, side dish, dessert, appetizer, salad, bread, breakfast, soup, beverage, sauce, or drink.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> SearchRecipesAsync(
                string query,
                string cuisine = "italian",
                string diet = "vegetarian",
                string excludeIngredients = "coconut",
                string intolerances = "egg, gluten",
                bool? limitLicense = false,
                int? number = 10,
                int? offset = 0,
                string type = "main course",
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/search");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "query", query },
                { "cuisine", (null != cuisine) ? cuisine : "italian" },
                { "diet", (null != diet) ? diet : "vegetarian" },
                { "excludeIngredients", (null != excludeIngredients) ? excludeIngredients : "coconut" },
                { "intolerances", (null != intolerances) ? intolerances : "egg, gluten" },
                { "limitLicense", (null != limitLicense) ? limitLicense : false },
                { "number", (null != number) ? number : 10 },
                { "offset", (null != offset) ? offset : 0 },
                { "type", (null != type) ? type : "main course" }
            });

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Find a set of recipes that adhere to the given nutrient limits. All the found recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
        /// </summary>
        /// <param name="maxcalories">Optional parameter: The maximum number of calories the recipe can have.</param>
        /// <param name="maxcarbs">Optional parameter: The maximum number of carbohydrates in grams the recipe can have.</param>
        /// <param name="maxfat">Optional parameter: The maximum number of fat in grams the recipe can have.</param>
        /// <param name="maxprotein">Optional parameter: The maximum number of protein in grams the recipe can have.</param>
        /// <param name="mincalories">Optional parameter: The minimum number of calories the recipe must have.</param>
        /// <param name="minCarbs">Optional parameter: The minimum number of carbohydrates in grams the recipe must have.</param>
        /// <param name="minfat">Optional parameter: The minimum number of fat in grams the recipe must have.</param>
        /// <param name="minProtein">Optional parameter: The minimum number of protein in grams the recipe must have.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic FindByNutrients(
                int? maxcalories = 1500,
                int? maxcarbs = 100,
                int? maxfat = 100,
                int? maxprotein = 100,
                int? mincalories = 0,
                int? minCarbs = 0,
                int? minfat = 0,
                int? minProtein = 0,
                Dictionary<string, object> queryParameters = null)
        {
            Task<dynamic> t = FindByNutrientsAsync(maxcalories, maxcarbs, maxfat, maxprotein, mincalories, minCarbs, minfat, minProtein, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Find a set of recipes that adhere to the given nutrient limits. All the found recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
        /// </summary>
        /// <param name="maxcalories">Optional parameter: The maximum number of calories the recipe can have.</param>
        /// <param name="maxcarbs">Optional parameter: The maximum number of carbohydrates in grams the recipe can have.</param>
        /// <param name="maxfat">Optional parameter: The maximum number of fat in grams the recipe can have.</param>
        /// <param name="maxprotein">Optional parameter: The maximum number of protein in grams the recipe can have.</param>
        /// <param name="mincalories">Optional parameter: The minimum number of calories the recipe must have.</param>
        /// <param name="minCarbs">Optional parameter: The minimum number of carbohydrates in grams the recipe must have.</param>
        /// <param name="minfat">Optional parameter: The minimum number of fat in grams the recipe must have.</param>
        /// <param name="minProtein">Optional parameter: The minimum number of protein in grams the recipe must have.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> FindByNutrientsAsync(
                int? maxcalories = 1500,
                int? maxcarbs = 100,
                int? maxfat = 100,
                int? maxprotein = 100,
                int? mincalories = 0,
                int? minCarbs = 0,
                int? minfat = 0,
                int? minProtein = 0,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/findByNutrients");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "maxcalories", (null != maxcalories) ? maxcalories : 1500 },
                { "maxcarbs", (null != maxcarbs) ? maxcarbs : 100 },
                { "maxfat", (null != maxfat) ? maxfat : 100 },
                { "maxprotein", (null != maxprotein) ? maxprotein : 100 },
                { "mincalories", (null != mincalories) ? mincalories : 0 },
                { "minCarbs", (null != minCarbs) ? minCarbs : 0 },
                { "minfat", (null != minfat) ? minfat : 0 },
                { "minProtein", (null != minProtein) ? minProtein : 0 }
            });

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.
        /// </summary>
        /// <param name="ingredients">Required parameter: A comma-separated list of ingredients that the recipes should contain.</param>
        /// <param name="limitLicense">Optional parameter: Whether to only show recipes with an attribution license.</param>
        /// <param name="number">Optional parameter: The maximal number of recipes to return (default = 5).</param>
        /// <param name="ranking">Optional parameter: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the List<FindByIngredientsModel> response from the API call</return>
        public List<FindByIngredientsModel> FindByIngredients(
                string ingredients,
                bool? limitLicense = false,
                int? number = 5,
                int? ranking = 1,
                Dictionary<string, object> queryParameters = null)
        {
            Task<List<FindByIngredientsModel>> t = FindByIngredientsAsync(ingredients, limitLicense, number, ranking, queryParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a whats in your fridge API endpoint.
        /// </summary>
        /// <param name="ingredients">Required parameter: A comma-separated list of ingredients that the recipes should contain.</param>
        /// <param name="limitLicense">Optional parameter: Whether to only show recipes with an attribution license.</param>
        /// <param name="number">Optional parameter: The maximal number of recipes to return (default = 5).</param>
        /// <param name="ranking">Optional parameter: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the List<FindByIngredientsModel> response from the API call</return>
        public async Task<List<FindByIngredientsModel>> FindByIngredientsAsync(
                string ingredients,
                bool? limitLicense = false,
                int? number = 5,
                int? ranking = 1,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/findByIngredients");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "ingredients", ingredients },
                { "limitLicense", (null != limitLicense) ? limitLicense : false },
                { "number", (null != number) ? number : 5 },
                { "ranking", (null != ranking) ? ranking : 1 }
            });

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, queryParameters);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<FindByIngredientsModel>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a recipe card given a recipe.
        /// </summary>
        /// <param name="backgroundImage">Required parameter: The background image ("none","background1", or "background2").</param>
        /// <param name="image">Required parameter: The binary image of the recipe as jpg.</param>
        /// <param name="ingredients">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="instructions">Required parameter: The instructions to make the recipe. One step per line.</param>
        /// <param name="mask">Required parameter: The mask to put over the recipe image ("ellipseMask", "diamondMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask").</param>
        /// <param name="readyInMinutes">Required parameter: The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">Required parameter: The number of servings that you can make from the ingredients.</param>
        /// <param name="title">Required parameter: The title of the recipe.</param>
        /// <param name="author">Optional parameter: The author of the recipe.</param>
        /// <param name="backgroundColor">Optional parameter: The background color on the recipe card as a hex-string.</param>
        /// <param name="fontColor">Optional parameter: The font color on the recipe card as a hex-string.</param>
        /// <param name="source">Optional parameter: The source of the recipe.</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic CreateRecipeCard(
                string backgroundImage,
                Stream image,
                string ingredients,
                string instructions,
                string mask,
                int readyInMinutes,
                int servings,
                string title,
                string author = "Emily Henderson",
                string backgroundColor = "#ffffff",
                string fontColor = "#333333",
                string source = "spoonacular.com",
                Dictionary<string, object> fieldParameters = null)
        {
            Task<dynamic> t = CreateRecipeCardAsync(backgroundImage, image, ingredients, instructions, mask, readyInMinutes, servings, title, author, backgroundColor, fontColor, source, fieldParameters);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a recipe card given a recipe.
        /// </summary>
        /// <param name="backgroundImage">Required parameter: The background image ("none","background1", or "background2").</param>
        /// <param name="image">Required parameter: The binary image of the recipe as jpg.</param>
        /// <param name="ingredients">Required parameter: The ingredient list of the recipe, one ingredient per line.</param>
        /// <param name="instructions">Required parameter: The instructions to make the recipe. One step per line.</param>
        /// <param name="mask">Required parameter: The mask to put over the recipe image ("ellipseMask", "diamondMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask").</param>
        /// <param name="readyInMinutes">Required parameter: The number of minutes it takes to get the recipe on the table.</param>
        /// <param name="servings">Required parameter: The number of servings that you can make from the ingredients.</param>
        /// <param name="title">Required parameter: The title of the recipe.</param>
        /// <param name="author">Optional parameter: The author of the recipe.</param>
        /// <param name="backgroundColor">Optional parameter: The background color on the recipe card as a hex-string.</param>
        /// <param name="fontColor">Optional parameter: The font color on the recipe card as a hex-string.</param>
        /// <param name="source">Optional parameter: The source of the recipe.</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateRecipeCardAsync(
                string backgroundImage,
                Stream image,
                string ingredients,
                string instructions,
                string mask,
                int readyInMinutes,
                int servings,
                string title,
                string author = "Emily Henderson",
                string backgroundColor = "#ffffff",
                string fontColor = "#333333",
                string source = "spoonacular.com",
                Dictionary<string, object> fieldParameters = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/recipes/visualizeRecipe");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/octet-stream" }
            };
            _headers.Add("X-Mashape-Key", Configuration.XMashapeKey);

            //append form/field parameters
            var _fields = new Dictionary<string,object>()
            {
                { "backgroundImage", backgroundImage },
                { "image", image },
                { "ingredients", ingredients },
                { "instructions", instructions },
                { "mask", mask },
                { "readyInMinutes", readyInMinutes },
                { "servings", servings },
                { "title", title },
                { "author", (null != author) ? author : "Emily Henderson" },
                { "backgroundColor", (null != backgroundColor) ? backgroundColor : "#ffffff" },
                { "fontColor", (null != fontColor) ? fontColor : "#333333" },
                { "source", (null != source) ? source : "spoonacular.com" }
            };
            //optional form parameters
            _fields.Add(APIHelper.PrepareFormFieldsFromObject("",fieldParameters));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 